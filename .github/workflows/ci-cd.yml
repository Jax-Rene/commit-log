name: CI & Deploy (Fly.io)

on:
  push:
    branches: [ main ]      # 推送到 main 时：跑 CI 并部署生产
  pull_request:             # PR：只跑 CI（不部署）
    branches: [ "**" ]

permissions:
  contents: read

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true  # 避免重复部署

jobs:
  lint_test_build:
    name: Lint / Test / Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ secrets.GO_VERSION || '1.24.x' }}

      - name: Cache Go build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Go vet
        run: go vet ./...

      - name: Test
        run: go test ./... -v

      # 可选：确保能编译通过（作为 Build 阶段）
      - name: Build binary
        run: go build -o dist/app ./...

  deploy_prod:
    name: Deploy to Fly.io (main only)
    needs: [lint_test_build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://${{ secrets.FLY_APP_NAME }}.fly.dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@v1

      # 如果你使用 Dockerfile，本步会在 Fly 的 remote builder 上构建镜像并部署
      - name: Deploy
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          flyctl deploy \
            --app "${{ secrets.FLY_APP_NAME }}" \
            --remote-only \
            --strategy immediate \
            --build-arg GIT_SHA=${{ github.sha }} \
            --config ./fly.toml
